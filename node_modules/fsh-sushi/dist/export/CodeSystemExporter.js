"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fhirtypes_1 = require("../fhirtypes");
const common_1 = require("../fhirtypes/common");
const rules_1 = require("../fshtypes/rules");
const FSHLogger_1 = require("../utils/FSHLogger");
const utils_1 = require("../utils");
class CodeSystemExporter {
    constructor(tank, pkg, fisher) {
        this.tank = tank;
        this.pkg = pkg;
        this.fisher = fisher;
    }
    setMetadata(codeSystem, fshDefinition) {
        codeSystem.setName(fshDefinition.name, fshDefinition.sourceInfo);
        codeSystem.setId(fshDefinition.id, fshDefinition.sourceInfo);
        if (fshDefinition.title)
            codeSystem.title = fshDefinition.title;
        if (fshDefinition.description)
            codeSystem.description = fshDefinition.description;
        // Version is set to value provided in config, will be overriden if reset by rules
        codeSystem.version = this.tank.config.version;
        codeSystem.url = `${this.tank.config.canonical}/CodeSystem/${codeSystem.id}`;
    }
    setConcepts(codeSystem, fshDefinition) {
        if (fshDefinition.concepts.length > 0) {
            codeSystem.concept = fshDefinition.concepts.map(concept => {
                const codeSystemConcept = { code: concept.code };
                if (concept.display)
                    codeSystemConcept.display = concept.display;
                if (concept.definition)
                    codeSystemConcept.definition = concept.definition;
                return codeSystemConcept;
            });
        }
    }
    setCaretRules(codeSystem, rules) {
        const csStructureDefinition = fhirtypes_1.StructureDefinition.fromJSON(this.fisher.fishForFHIR('CodeSystem', utils_1.Type.Resource));
        for (const rule of rules) {
            try {
                if (rule instanceof rules_1.CaretValueRule) {
                    const { fixedValue, pathParts } = csStructureDefinition.validateValueAtPath(rule.caretPath, rule.value, this.fisher);
                    common_1.setPropertyOnInstance(codeSystem, pathParts, fixedValue);
                }
            }
            catch (e) {
                FSHLogger_1.logger.error(e.message, rule.sourceInfo);
            }
        }
    }
    exportCodeSystem(fshDefinition) {
        if (this.pkg.codeSystems.some(cs => cs.name === fshDefinition.name)) {
            return;
        }
        const codeSystem = new fhirtypes_1.CodeSystem();
        this.setMetadata(codeSystem, fshDefinition);
        this.setCaretRules(codeSystem, fshDefinition.rules);
        this.setConcepts(codeSystem, fshDefinition);
        this.pkg.codeSystems.push(codeSystem);
        return codeSystem;
    }
    export() {
        const codeSystems = this.tank.getAllCodeSystems();
        for (const cs of codeSystems) {
            try {
                this.exportCodeSystem(cs);
            }
            catch (e) {
                FSHLogger_1.logger.error(e.message, cs.sourceInfo);
            }
        }
        if (codeSystems.length > 0) {
            FSHLogger_1.logger.info(`Converted ${codeSystems.length} FHIR CodeSystems.`);
        }
        return this.pkg;
    }
}
exports.CodeSystemExporter = CodeSystemExporter;
//# sourceMappingURL=CodeSystemExporter.js.map