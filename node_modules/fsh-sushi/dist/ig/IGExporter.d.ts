import { Package } from '../export';
import { FHIRDefinitions } from '../fhirdefs';
/**
 * The IG Exporter exports the FSH artifacts into a file structure supported by the IG Publisher.
 * This allows a FSH Tank to be built as a FHIR IG.  Currently, template-based IG publishing is
 * still new, so this functionality is subject to change.
 *
 * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/index.html}
 */
export declare class IGExporter {
    private readonly pkg;
    private readonly fhirDefs;
    private readonly igDataPath;
    private ig;
    constructor(pkg: Package, fhirDefs: FHIRDefinitions, igDataPath: string);
    /**
     * Export the IG structure to the location specified by the outPath argument
     * @param outPath {string} - the path to export the IG file structure to
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#directory-structure}
     */
    export(outPath: string): void;
    /**
     * Initializes the ImplementationGuide JSON w/ data from the package.json
     *
     * @see {@link https://confluence.hl7.org/pages/viewpage.action?pageId=35718629#NPMPackageSpecification-PackageManifestpropertiesforIGs}
     */
    private initIG;
    /**
     * Add the static files that (currently) do not change from IG to IG.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    private addStaticFiles;
    /**
     * Add the index.md file.  If the user provided one in ig-data/input/pagecontent,
     * use that -- otherwise create one, setting its content to be the package
     * description.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    private addIndex;
    /**
     * Adds additional pages beyond index.md that are defined by the user.
     * Only add formats that are supported by the IG template
     * Intro and notes file contents are injected into relevant pages and should not be treated as their own page
     *
     * @param {string} igPath - the path where the IG is exported to
     */
    private addOtherPageContent;
    /**
     * Sorts and renames pages based on numeric prefixes.
     * Numeric prefixes are used for applying a sort order, but should be removed
     * from the page's name and title unless doing so would cause a name collision.
     *
     * @param {string[]} pages - list of file names with extensions
     * @returns {PageMetadata []} - sorted list of file information objects
     */
    private organizePageContent;
    /**
     * Compares two file names, each of which may be prefixed with a number.
     * If neither file has a prefix, compares the file names alphabetically.
     * If one file has a prefix, that file is before the other.
     * If both have a prefix, compares the prefixes numerically.
     * If the prefixes are equal, resolves the tie by comparing the file names alphabetically.
     *
     * @param {PageMetadata} pageA - metadata for first file
     * @param {PageMetadata} pageB - metadata for second file
     * @returns {number} - positive when file b comes first, negative when file a comes first, zero when the file names are equal.
     */
    private compareIgFilenames;
    /**
     * Adds any user provided images that can be referenced directly in other pages
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    private addImages;
    /**
     * Adds any user provided includes files
     * A user provided menu.xml will be in this folder. If one is not provided, the static one SUSHI provides will be used.
     *
     * @param {string} igPath - the path where the IG is exported to
     */
    private addIncludeContents;
    /**
     * Adds user provided ignoreWarnings.txt file if it exists; otherwise the static one SUSHI provides will be used.
     *
     * @param {string} igPath - the path where the IG is exported to
     */
    private addIgnoreWarningsFile;
    /**
     * Add each of the resources from the package to the ImplementationGuide JSON file.
     */
    private addResources;
    /**
     * Adds any user provided resource files
     * This includes definitions in:
     * capabilities, extensions, models, operations, profiles, resources, vocabulary, examples
     * Based on: https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input
     *
     * @param {string} igPath - the path where the IG is exported to
     */
    private addPredefinedResources;
    /**
     * Writes the in-memory ImplementationGuide JSON to the IG output folder.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    private addImplementationGuide;
    /**
     * Creates an ig.ini file based on the package.json and exports it to the IG folder.
     * If the user specified an igi.ini file in the ig-data folder, then use its values
     * as long as they don't conflict with values already in package.json.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    private addIgIni;
    /**
     * Adds the package-list.json file to the IG.  If one already exists, it will be used, otherwise
     * it will be generated based on the package.json.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    private addPackageList;
}
